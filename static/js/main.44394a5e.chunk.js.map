{"version":3,"sources":["assets/images/logo.svg","components/Input/Input.tsx","assets/images/icon-person.svg","assets/images/icon-dollar.svg","components/Button/Button.tsx","components/ButtonLarge/ButtonLarge.tsx","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","forwardRef","ref","id","name","isValidationError","placeholder","icon","style","getInputValue","useState","inputValue","setInputValue","resetInput","useImperativeHandle","className","type","value","onChange","e","target","src","alt","Button","onClick","children","ButtonLarge","disabled","tipRates","receiptInformationInitialState","billAmount","NaN","tipRate","peopleCount","resultingAmountsInitialState","tipAmountPerPerson","totalAmountPerPerson","Main","receiptInformation","setReceiptInformation","resultingAmounts","setResultingAmounts","showZeroError","setShowZeroError","activeButton","setActiveButton","billAmountRef","useRef","tipRateRef","peopleCountRef","chooseTipRate","parseInt","useEffect","totalPerPerson","tipPerPerson","calculateAmountsPerPerson","receiptValuesInvalid","Number","isNaN","htmlFor","dollarIcon","map","rate","String","height","fontSize","personIcon","toFixed","current","App","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44394a5e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3cc0528b.svg\";","import React, {\n  ChangeEvent, forwardRef, useImperativeHandle, useState,\n} from 'react';\nimport './Input.scss';\n\ntype InputProps = {\n    id?: string;\n    name: string;\n    isValidationError?: boolean;\n    placeholder: string;\n    icon?: string;\n    style?: React.CSSProperties;\n    getInputValue: (value: string) => void;\n}\n\nconst Input = forwardRef(({\n  id, name, isValidationError, placeholder, icon, style, getInputValue,\n}: InputProps, ref) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n    getInputValue(e.target.value);\n  };\n\n  const resetInput = () => {\n    setInputValue('');\n  };\n\n  useImperativeHandle(ref, () => ({\n    resetInput,\n  }));\n\n  return (\n    <div className=\"input--container\">\n      <input\n        id={id}\n        name={name}\n        type=\"text\"\n        placeholder={placeholder}\n        className={`input ${isValidationError ? 'error' : ''}`}\n        value={inputValue}\n        onChange={handleChange}\n        style={style}\n      />\n      <img src={icon} alt=\"\" className=\"input__icon\" />\n    </div>\n  );\n});\n\nexport default Input;\n","export default __webpack_public_path__ + \"static/media/icon-person.65bfd204.svg\";","export default __webpack_public_path__ + \"static/media/icon-dollar.9f9be353.svg\";","import React, { FC } from 'react';\nimport './Button.scss';\n\ntype ButtonProps = {\n    className: string;\n    onClick: () => void;\n}\n\nconst Button:FC<ButtonProps> = ({ className, onClick, children }) => (\n  <button\n    className={`button ${className}`}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React, { FC } from 'react';\nimport './ButtonLarge.scss';\n\ntype ButtonLargeProps = {\n    onClick: () => void;\n    disabled: boolean;\n}\n\nconst ButtonLarge:FC<ButtonLargeProps> = ({ onClick, children, disabled }) => (\n  <button\n    className=\"button button-large\"\n    onClick={onClick}\n    disabled={disabled}\n  >\n    {children}\n  </button>\n);\n\nexport default ButtonLarge;\n","import React, { useEffect, useRef, useState } from 'react';\nimport './Main.scss';\nimport Input from '../Input/Input';\nimport personIcon from '../../assets/images/icon-person.svg';\nimport dollarIcon from '../../assets/images/icon-dollar.svg';\nimport Button from '../Button/Button';\nimport ButtonLarge from '../ButtonLarge/ButtonLarge';\n\nconst tipRates = [5, 10, 15, 25, 50];\n\ntype ReceiptInformationType = {\n  billAmount: number;\n  tipRate: number;\n  peopleCount: number;\n};\n\nconst receiptInformationInitialState = {\n  billAmount: NaN,\n  tipRate: NaN,\n  peopleCount: NaN,\n};\n\nconst resultingAmountsInitialState = {\n  tipAmountPerPerson: 0,\n  totalAmountPerPerson: 0,\n};\n\nconst Main = () => {\n  const [receiptInformation, setReceiptInformation] = useState<ReceiptInformationType>(receiptInformationInitialState);\n  const [resultingAmounts, setResultingAmounts] = useState(resultingAmountsInitialState);\n  const [showZeroError, setShowZeroError] = useState(false);\n  const [activeButton, setActiveButton] = useState(0);\n\n  // creating references, so that it is possible to reset input fields\n  const billAmountRef = useRef<any | null>(null);\n  const tipRateRef = useRef<any | null>(null);\n  const peopleCountRef = useRef<any | null>(null);\n\n  const chooseTipRate = (value: string) => {\n    setReceiptInformation({ ...receiptInformation, tipRate: parseInt(value, 10) });\n  };\n\n  const handleClick = (value: string) => {\n    chooseTipRate(value);\n    setActiveButton(parseInt(value, 10));\n  };\n\n  const calculateAmountsPerPerson = () => {\n    const { tipRate, billAmount, peopleCount } = receiptInformation;\n\n    if (peopleCount === 0) {\n      setShowZeroError(true);\n      return;\n    }\n\n    const totalPerPerson = billAmount / peopleCount;\n    const tipPerPerson = totalPerPerson * (tipRate / 100);\n\n    setShowZeroError(false);\n    setResultingAmounts({ tipAmountPerPerson: tipPerPerson, totalAmountPerPerson: totalPerPerson });\n  };\n\n  useEffect(() => {\n    calculateAmountsPerPerson();\n  }, [receiptInformation]);\n\n  const handleDataReset = () => {\n    setReceiptInformation(receiptInformationInitialState);\n    setResultingAmounts(resultingAmountsInitialState);\n\n    billAmountRef.current?.resetInput();\n    tipRateRef.current?.resetInput();\n    peopleCountRef.current?.resetInput();\n\n    setActiveButton(0);\n  };\n\n  const receiptValuesInvalid = (Number.isNaN(receiptInformation.peopleCount)\n      || Number.isNaN(receiptInformation.tipRate)\n      || Number.isNaN(receiptInformation.billAmount)\n      || receiptInformation.peopleCount === 0);\n\n  return (\n    <div className=\"main-section\">\n\n      <section className=\"main-section__input-part\">\n        <div className=\"input-part__item\">\n          <label htmlFor=\"amount\">\n            Bill\n          </label>\n          <Input\n            ref={billAmountRef}\n            name=\"billAmount\"\n            id=\"amount\"\n            getInputValue={(value) => {\n              setReceiptInformation({ ...receiptInformation, billAmount: parseInt(value, 10) });\n            }}\n            placeholder=\"0\"\n            icon={dollarIcon}\n          />\n        </div>\n        <div className=\"input-part__item\">\n          <span>\n            Select Tip %\n          </span>\n          <div className=\"rate-choice-section\">\n            {tipRates.map((rate) => (\n              <div\n                key={rate}\n                className=\"rate\"\n              >\n                <Button\n                  className={(rate === activeButton) ? 'active' : ''}\n                  onClick={() => handleClick(String(rate))}\n                >\n                  {rate}\n                  %\n                </Button>\n              </div>\n            ))}\n            <div className=\"rate\">\n              <Input\n                ref={tipRateRef}\n                name=\"tipRate\"\n                placeholder=\"Custom\"\n                getInputValue={(value) => {\n                  chooseTipRate(value);\n                  setActiveButton(0);\n                }}\n                style={{ height: '2.70rem', fontSize: '20px' }}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"input-part__item\">\n          <div className=\"error-message--wrapper\">\n            <label htmlFor=\"people-count\">\n              Number of People\n            </label>\n            <div>{showZeroError && (<span className=\"error-message\">Can&apos;t be zero</span>)}</div>\n          </div>\n          <Input\n            ref={peopleCountRef}\n            name=\"peopleCount\"\n            isValidationError={showZeroError}\n            id=\"people-count\"\n            getInputValue={(value) => {\n              setReceiptInformation({ ...receiptInformation, peopleCount: parseInt(value, 10) });\n            }}\n            placeholder=\"0\"\n            icon={personIcon}\n          />\n        </div>\n      </section>\n\n      <section className=\"main-section__output-part\">\n        <div className=\"output-part__items\">\n          <div className=\"output-part__item\">\n            <div className=\"label\">\n              <h2 className=\"label-heading\">\n                Tip Amount\n              </h2>\n              <span>/ person</span>\n            </div>\n            <div className=\"amount\">\n              $\n              {resultingAmounts.tipAmountPerPerson\n                ? resultingAmounts.tipAmountPerPerson.toFixed(2)\n                : '0.00'}\n            </div>\n          </div>\n          <div className=\"output-part__item\">\n            <div className=\"label\">\n              <h2 className=\"label-heading\">\n                Total\n              </h2>\n              <span>/ person</span>\n            </div>\n            <div className=\"amount\">\n              $\n              {resultingAmounts.totalAmountPerPerson\n                ? resultingAmounts.totalAmountPerPerson.toFixed(2)\n                : '0.00'}\n            </div>\n          </div>\n        </div>\n        <div>\n          <ButtonLarge\n            onClick={handleDataReset}\n            disabled={receiptValuesInvalid}\n          >\n            RESET\n          </ButtonLarge>\n        </div>\n      </section>\n\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\r\nimport './App.scss';\r\nimport logo from './assets/images/logo.svg';\r\nimport Main from './components/Main/Main';\r\n\r\nconst App = () => (\r\n  <div className=\"app-container\">\r\n    <div className=\"app\">\r\n      <header className=\"header\">\r\n        <img src={logo} alt=\"Splitter Logo\" />\r\n      </header>\r\n      <Main />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './utils/reset.scss';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}